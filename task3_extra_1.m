% part 8: extra credit 1: Modify F matrix for cropped views

image1 = imread('im1corrected.jpg');
image2 = imread('im2corrected.jpg');
v1 = load('Parameters_V1_1.mat').Parameters;
v2 = load('Parameters_V2_1.mat').Parameters;
mocap_3d = load('mocapPoints3D.mat').pts3D';
addpath("./");

image1_x = 420;
image1_y = 340;
image1_width = 340;
image1_height = 430;

image2_x = 920;
image2_y = 310;
image2_width = 320;
image2_height = 540;

image1_cropped = image1(image1_y:(image1_y+image1_height), image1_x:(image1_x+image1_width),:);
image2_cropped = image2(image2_y:(image2_y+image2_height), image2_x:(image2_x+image2_width),:);

figure; clf;
imshow(image1_cropped);
hold on;
title('Cropped image from camera v1.')
hold off;
pause(1);

figure; clf;
imshow(image2_cropped);
hold on;
title('Cropped image from camera v2.')
hold off;
pause(1);

v1_Kmat = v1.Kmat;
v1_Rmat = v1.Rmat;
v1_position = v1.position(:);
v2_Kmat = v2.Kmat;
v2_Rmat = v2.Rmat;
v2_position = v2.position(:);

% Update Kmats

v1_Kmat_new = v1_Kmat;
v1_Kmat_new(1,3) = v1_Kmat(1,3) - image1_x;
v1_Kmat_new(2,3) = v1_Kmat(2,3) - image1_y;

v2_Kmat_new = v2_Kmat;
v2_Kmat_new(1,3) = v2_Kmat(1,3) - image2_x;
v2_Kmat_new(2,3) = v2_Kmat(2,3) - image2_y;


% project 3d points to 2d over cropped images
% code copy from task3_2, tired to adjust the function and other previous work

% projection for v1
points3d = mocap_3d';

P = v1.Pmat;
K = v1_Kmat_new;

% Add a row of ones at the bottom (4-th row) of points,
% for satisfying the later calculation.
points3d(4,:)= 1;


% project the 3d points to 2d
tmp = K * (P * points3d);

tmp(1,:) = tmp(1,:) ./ tmp(3, :);
tmp(2,:) = tmp(2,:) ./ tmp(3, :);
tmp(3,:) = 1; 

points2d = tmp(1:2,:);
v1_points2d_cropped = points2d;

figure;
clf;
imshow(image1_cropped);
hold on;
plot(points2d(1,:), points2d(2,:), 'r*', 'Linewidth', 1);
title("projected points over cropped image from camera v1")
hold off;
pause(1);




% projection for v2
points3d = mocap_3d';

P = v2.Pmat;
K = v2_Kmat_new;

% Add a row of ones at the bottom (4-th row) of points,
% for satisfying the later calculation.
points3d(4,:)= 1;


% project the 3d points to 2d
tmp = K * (P * points3d);

tmp(1,:) = tmp(1,:) ./ tmp(3, :);
tmp(2,:) = tmp(2,:) ./ tmp(3, :);
tmp(3,:) = 1; 

points2d = tmp(1:2,:);
v2_points2d_cropped = points2d;

figure;
clf;
imshow(image2_cropped);
hold on;
plot(points2d(1,:), points2d(2,:), 'r*', 'Linewidth', 1);
title("projected points over cropped image from camera v2")
hold off;
pause(1);




% draw epipolar lines over cropped graphs with new F with new calibration parameters.

F_new = get_F_from_camera_calibration_parameters(v1_Rmat, v2_Rmat, v1_Kmat_new, v2_Kmat_new, v1_position, v2_position);


v1_points2d = task3_2('Parameters_V1_1.mat', 'mocapPoints3D.mat', 'im1corrected.jpg', 0);
v2_points2d = task3_2('Parameters_V2_1.mat', 'mocapPoints3D.mat', 'im2corrected.jpg', 0);
F_original = get_F_from_camera_calibration_parameters(v1_Rmat, v2_Rmat, v1_Kmat, v2_Kmat, v1_position, v2_position);


display_epipolar_lines(F_new, v1_points2d_cropped, v2_points2d_cropped, image1_cropped, image2_cropped, "Graph about epipolar lines generated by new F matrix, which generated by " + newline +"new camera calibration parameters, after cropping the image ");
display_epipolar_lines(F_original, v1_points2d, v2_points2d, image1, image2, "Graph about epipolar lines generated by previous F matrix, which generated by " + newline +"previous camera calibration parameters, before cropping the image ");











